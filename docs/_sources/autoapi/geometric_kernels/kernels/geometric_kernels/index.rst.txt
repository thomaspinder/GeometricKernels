:py:mod:`geometric_kernels.kernels.geometric_kernels`
=====================================================

.. py:module:: geometric_kernels.kernels.geometric_kernels

.. autoapi-nested-parse::

   Implementation of geometric kernels on several spaces



Module Contents
---------------

.. py:class:: MaternIntegratedKernel(space, num_points_t)

   Bases: :py:obj:`geometric_kernels.kernels.BaseGeometricKernel`

   This class computes a Matérn kernel by integrating over the heat kernel [1].

   For non-compact manifolds:
   .. math:: k_{\nu, \kappa, \sigma^2}(x, x') = \int_0^{\infty} u^{\nu - 1} e^{-\frac{2 \nu}{\kappa^2} u} k_{\infty, \sqrt{2 u}, \sigma^2}(x, x') \d u

   For compact manifolds:
   .. math:: k_{\nu, \kappa, \sigma^2}(x, x') = \int_0^{\infty} u^{\nu - 1 + d/2} e^{-\frac{2 \nu}{\kappa^2} u} k_{\infty, \sqrt{2 u}, \sigma^2}(x, x') \d u

   References:

   [1] N. Jaquier, V. Borovitskiy, A. Smolensky, A. Terenin, T. Afour, and L. Rozo.
       Geometry-aware Bayesian Optimization in Robotics using Riemannian Matérn Kernels. CoRL 2021.

   :param space: Space providing the heat kernel and distance.
   :param num_point_t: number of points used in the integral.

   .. py:method:: K(params, state, X, X2 = None, **kwargs)

      Compute the kernel via integration of heat kernel


   .. py:method:: K_diag(params, state, X, **kwargs)

      Compute the kernel via integration of heat kernel


   .. py:method:: init_params_and_state()

      Get initial params and state.

      For `MaternIntegratedKernel`, params contains the lengthscale and smoothness parameter `nu`. The state is an empty `dict`.

      :return: tuple(params, state)


   .. py:method:: link_function(params, distance, t)

      This function links the heat kernel to the Matérn kernel, i.e., the Matérn kernel correspond to the integral of
      this function from 0 to inf.
      Parameters
      ----------
      :param distance: precomputed distance between the inputs
      :param params: dictionary with `lengthscale` - the kernel lengthscale and `nu` - the smoothness parameter
      :param t: the heat kernel lengthscales to integrate against
      Returns
      -------
      :return: link function between the heat and Matérn kernels



.. py:class:: MaternKarhunenLoeveKernel(space, num_eigenfunctions)

   Bases: :py:obj:`geometric_kernels.kernels.BaseGeometricKernel`

   This class approximates a kernel by the finite feature decomposition using
   its Laplace-Beltrami eigenfunctions and eigenvalues [1, 2].

   .. math:: k(x, x') = \sum_{i=0}^{M-1} S(\sqrt\lambda_i) \phi_i(x) \phi_i(x'),

   where :math:`\lambda_i` and :math:`\phi_i(\cdot)` are the eigenvalues and
   eigenfunctions of the Laplace-Beltrami operator and :math:`S(\cdot)` the
   spectrum of the stationary kernel. The eigenvalues and eigenfunctions belong
   to the `SpaceWithEigenDecomposition` instance.

   References:

   [1] Viacheslav Borovitskiy, Alexander Terenin, Peter Mostowsky, and Marc Peter Deisenroth,
       Matern Gaussian processes on Riemannian manifolds

   [2] Arno Solin, and Simo Särkkä, Hilbert Space Methods for Reduced-Rank
       Gaussian Process Regression

   :param space: Space providing the eigenvalues and eigenfunctions of
       the Laplace-Beltrami operator.
   :param nu: Determines continuity of the Mat\'ern kernel. Typical values
       include 1/2 (i.e., the Exponential kernel), 3/2, 5/2 and +\infty
       `np.inf` which corresponds to the Squared Exponential kernel.
   :param num_eigenfunctions: number of eigenvalues and functions to include
       in the summation.

   .. py:method:: K(params, state, X, X2 = None, **kwargs)

      Compute the mesh kernel via Laplace eigendecomposition


   .. py:method:: K_diag(params, state, X, **kwargs)

      Returns covariance between elements in `X`.


   .. py:method:: _spectrum(s, nu, lengthscale)

      Matern or RBF spectrum evaluated at `s`.
      Depends on the `lengthscale` parameters.


   .. py:method:: eigenfunctions()

      Eigenfunctions of the kernel, may depend on parameters.


   .. py:method:: eigenvalues(params, state)

      Eigenvalues of the kernel.

      :return: [M, 1]


   .. py:method:: init_params_and_state()

      Get initial params and state.

      In this case, state is Laplacian eigenvalues and eigenfunctions,
      and params contains the lengthscale and smoothness parameter `nu`.

      :return: tuple(params, state)



