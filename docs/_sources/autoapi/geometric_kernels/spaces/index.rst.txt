:py:mod:`geometric_kernels.spaces`
==================================

.. py:module:: geometric_kernels.spaces

.. autoapi-nested-parse::

   Spaces on which to define kernels



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   circle/index.rst
   eigenfunctions/index.rst
   graph/index.rst
   hyperbolic/index.rst
   hypersphere/index.rst
   mesh/index.rst
   product/index.rst


Package Contents
----------------

.. py:class:: Circle

   Bases: :py:obj:`geometric_kernels.spaces.base.DiscreteSpectrumSpace`, :py:obj:`geomstats.geometry.hypersphere.Hypersphere`

   Circle :math:`\mathbb{S}^1` manifold with sinusoids and cosines eigenfunctions.

   .. py:property:: dimension
      :type: int

      Dimension of the manifold

      Examples:

      * circle: 1 dimensional
      * sphere: 2 dimensional
      * torus: 2 dimensional


   .. py:method:: get_eigenfunctions(num)

      :param num: number of eigenlevels returned.


   .. py:method:: get_eigenvalues(num)

      Eigenvalues of the Laplace-Beltrami operator corresponding to the first `num` levels.

      :return: [M, 1] array containing the eigenvalues


   .. py:method:: get_repeated_eigenvalues(num)

      First `num` eigenvalues of the Laplace-Beltrami operator,
      repeated according to their multiplicity.

      :return: [M, 1] array containing the eigenvalues


   .. py:method:: is_tangent(vector, base_point = None, atol = gs.backend.atol)
      :abstractmethod:

      Check whether the `vector` is tangent at `base_point`.

      :param vector: shape=[..., dim]
          Vector to evaluate.
      :param base_point: shape=[..., dim]
          Point on the manifold. Defaults to `None`.
      :param atol: float
          Absolute tolerance.
          Optional, default: 1e-6.
      :return: Boolean denoting if vector is a tangent vector at the base point.



.. py:class:: DiscreteSpectrumSpace

   Bases: :py:obj:`Space`

   A Space for which we can obtain the eigenvalues and eigenfunctions of
   the Laplace-Beltrami operator.

   Examples includes `Graph`\s, `Manifold`\s and `Mesh`\es.

   .. py:method:: get_eigenfunctions(num)
      :abstractmethod:

      First `num` eigenfunctions of the Laplace-Beltrami operator


   .. py:method:: get_eigenvalues(num)
      :abstractmethod:

      First `num` eigenvalues of the Laplace-Beltrami operator

      :return: [num, 1] array containing the eigenvalues


   .. py:method:: get_repeated_eigenvalues(num)
      :abstractmethod:

      First `num` eigenvalues of the Laplace-Beltrami operator,
      repeated according to their multiplicity.

      :return: [M, 1] array containing the eigenvalues



.. py:class:: Graph(adjacency_matrix)

   Bases: :py:obj:`geometric_kernels.spaces.base.DiscreteSpectrumSpace`

   Represents an arbitrary undirected graph.

   :param adjacency_matrix: An n-dimensional square, symmetric matrix,
       where adjacency_matrix[i, j] is non-zero if there is an edge
       between nodes i and j. Scipy's sparse matrices are supported.

   .. py:property:: dimension
      :type: int

      Dimension of the manifold

      Examples:

      * circle: 1 dimensional
      * sphere: 2 dimensional
      * torus: 2 dimensional


   .. py:method:: get_eigenfunctions(num)

      First `num` eigenfunctions of the Laplace-Beltrami operator on the Graph.

      :param num: number of eigenfunctions returned
      :return: eigenfu [n, num]


   .. py:method:: get_eigensystem(num)

      Returns the first `num` eigenvalues and eigenvectors of the graph Laplacian.
      Caches the solution to prevent re-computing the same values. Note that, if a
      sparse scipy matrix is input, requesting all n eigenpairs will lead to a
      conversion of the sparse matrix to a dense one due to scipy.sparse.linalg.eigsh
      limitations.

      :param num: number of eigenvalues and functions to return.
      :return: A Tuple of eigenvectors [n, num], eigenvalues [num, 1]


   .. py:method:: get_eigenvalues(num)

      :param num: number of eigenvalues returned
      :return: eigenvalues [num, 1]


   .. py:method:: get_eigenvectors(num)

      :param num: number of eigenvectors returned
      :return: eigenvectors [n, num]


   .. py:method:: get_repeated_eigenvalues(num)

      :param num: number of eigenvalues
      :return: eigenvalues [num, 1]



.. py:class:: Mesh(vertices, faces)

   Bases: :py:obj:`geometric_kernels.spaces.base.DiscreteSpectrumSpace`

   A representation of a surface mesh. Mimics `PyMesh` interface. Uses
   `potpourri3d` to read mesh files.

   :param vertices: A [Nv, D] array of vertex coordinates, where Nv is the number of vertices,
       D is the dimention of the embedding space (D must be either 2 or 3).
   :param faces: A [Nf, 3] array of vertex indices that represents a
       generalized array of faces, where Nf is the number of faces.

       .. Note:
           Only 3 vertex indices per face are supported

   .. py:property:: dimension
      :type: int

      Dimension, D


   .. py:property:: faces
      :type: numpy.ndarray

      A [Nf, 3] array of vertex indices that represents a generalized array of
      faces, where Nf is the number of faces.


   .. py:property:: num_faces
      :type: int

      Number of faces, Nf


   .. py:property:: num_vertices
      :type: int

      Number of vertices, Nv


   .. py:property:: vertices
      :type: numpy.ndarray

      A [Nv, D] array of vertex coordinates, where Nv is the number of vertices,
      D is the dimention of the embedding space (D must be either 2 or 3).


   .. py:method:: get_eigenfunctions(num)

      First `num` eigenfunctions of the Laplace-Beltrami operator on the Mesh.

      :param num: number of eigenfunctions returned
      :return: eigenfu [Nv, num]


   .. py:method:: get_eigensystem(num)

      Returns the first `num` eigenvalues and eigenfunctions of the Laplace-Beltrami
      operator on the space. Makes use of Nick Sharp's robust laplacian package
      and Scipy's sparse linear algebra.

      Caches the solution to prevent re-computing the same values.

      TODO(VD): Make sure this is the optimal way to compute this!

      :param num: number of eigenvalues and functions to return.
      :return: A Tuple of eigenvectors [Nv, num], eigenvalues [num, 1]


   .. py:method:: get_eigenvalues(num)

      :param num: number of eigenvalues returned
      :return: eigenvalues [num, 1]


   .. py:method:: get_eigenvectors(num)

      :param num: number of eigenvectors returned
      :return: eigenvectors [Nv, num]


   .. py:method:: get_repeated_eigenvalues(num)

      :param num: number of eigenvalues returned
      :return: eigenvalues [num, 1]


   .. py:method:: load_mesh(filename)
      :classmethod:

      :param filename: path to read the file from. Supported formats: `obj`,
          `ply`, `off`, and `stl`. Format inferred automatically from the path
          extension.



.. py:class:: ProductDiscreteSpectrumSpace(*spaces, num_eigen = 100)

   Bases: :py:obj:`geometric_kernels.spaces.base.DiscreteSpectrumSpace`

   A Space for which we can obtain the eigenvalues and eigenfunctions of
   the Laplace-Beltrami operator.

   Examples includes `Graph`\s, `Manifold`\s and `Mesh`\es.

   Implementation of products of discrete spectrum spaces.
   Assumes the spaces are compact manifolds and that the eigenfunctions are the
   eigenfunctions of the Laplace-Beltrami operator. On such a space the eigen(values/functions)
   on the product space associated with the multiindex :math:`\alpha` are given by

   .. math::
       \lambda_{\alpha} = \sum_i \lambda_{i, \alpha_i}

       \phi_{\alpha} = \prod_i \phi_{i, \alpha_i}

   where :math:`\lambda_{i, j}` is the j'th eigenvalue on the i'th manifold in the product
   and :math:`\phi_{i, j}` is the j'th eigenfunction on the i'th manifold in the product.

   The eigenfunctions of such manifolds can't in genreal be analytically ordered, and
   so they must be precomputed.

   :param spaces: The spaces to product together
   :param num_eigen: (optional)
       number of eigenvalues to use for this product space, by default 100

   .. py:property:: dimension
      :type: int

      Dimension of the manifold

      Examples:

      * circle: 1 dimensional
      * sphere: 2 dimensional
      * torus: 2 dimensional


   .. py:method:: get_eigenfunctions(num)

      First `num` eigenfunctions of the Laplace-Beltrami operator


   .. py:method:: get_eigenvalues(num)

      First `num` eigenvalues of the Laplace-Beltrami operator

      :return: [num, 1] array containing the eigenvalues


   .. py:method:: get_repeated_eigenvalues(num)

      First `num` eigenvalues of the Laplace-Beltrami operator,
      repeated according to their multiplicity.

      :return: [M, 1] array containing the eigenvalues



.. py:class:: Space

   Bases: :py:obj:`abc.ABC`

   Object representing a space on which a kernel can be defined.

   .. py:method:: dimension()
      :abstractmethod:

      Dimension of the manifold

      Examples:

      * circle: 1 dimensional
      * sphere: 2 dimensional
      * torus: 2 dimensional



