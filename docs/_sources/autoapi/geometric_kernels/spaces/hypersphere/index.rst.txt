:py:mod:`geometric_kernels.spaces.hypersphere`
==============================================

.. py:module:: geometric_kernels.spaces.hypersphere

.. autoapi-nested-parse::

   Spaces for which there exist analytical expressions for the manifold
   and the eigenvalues and functions. Examples include the `Circle` and the `Hypersphere`.
   The Geomstats package is used for most of the geometric calculations.



Module Contents
---------------

.. py:class:: Hypersphere(dim)

   Bases: :py:obj:`geometric_kernels.spaces.DiscreteSpectrumSpace`, :py:obj:`geomstats.geometry.hypersphere.Hypersphere`

   The d-dimensional hypersphere embedded in the (d+1)-dimensional Euclidean space.

   :param dim: Dimension of the hypersphere :math:`S^d`.

   .. py:property:: dimension
      :type: int

      Dimension of the manifold

      Examples:

      * circle: 1 dimensional
      * sphere: 2 dimensional
      * torus: 2 dimensional


   .. py:method:: ehess2rhess(x, egrad, ehess, direction)

      Riemannian Hessian along a given direction computed from the Euclidean Hessian

      :return: [dim] array containing Hess_f(x)[direction]

      References:

      [1] P.-A. Absil, R. Mahony, R. Sepulchre.
          Optimization algorithms on matrix manifolds. Princeton University Press 2007.


   .. py:method:: get_eigenfunctions(num)

      :param num: number of eigenfunctions returned.


   .. py:method:: get_eigenvalues(num)

      First `num` eigenvalues of the Laplace-Beltrami operator

      :return: [num, 1] array containing the eigenvalues


   .. py:method:: get_repeated_eigenvalues(num)

      First `num` eigenvalues of the Laplace-Beltrami operator,
      repeated according to their multiplicity.

      :return: [M, 1] array containing the eigenvalues



.. py:class:: SphericalHarmonics(dim, num_levels)

   Bases: :py:obj:`geometric_kernels.spaces.eigenfunctions.EigenfunctionWithAdditionTheorem`

   Eigenfunctions Laplace-Beltrami operator on the sphere correspond to the
   spherical harmonics.

   :param dim:
       S^{dim}. Example: dim = 2 is the sphere in R^3. Follows geomstats convention.

   :param num_levels:
       Specifies the number of levels (degrees) of the spherical harmonics.

   .. py:property:: num_eigenfunctions
      :type: int

      Number of eigenfunctions, M


   .. py:property:: num_eigenfunctions_per_level
      :type: lab.Numeric

      Number of eigenfunctions per level, [N_l]_{l=0}^{L-1}


   .. py:property:: num_levels
      :type: int

      Number of levels, L

      For each level except the first where there is just one, there are two
      eigenfunctions.


   .. py:method:: __call__(X, **parameters)

      Evaluates the spherical harmonics at `X`, which are Euclidian coordinates.
      In other words, the points are parameterized by their extrinsic
      (self.dim+1)-coordinates.

      :param X: TensorType, [N, self.dim+1]
          N points with unit norm in Euclidian coordinate system (extrinsic).

      :return: [N, M], where M = self.num_eigenfunctions


   .. py:method:: _addition_theorem(X, X2, **parameters)

      Returns the result of applying the additional theorem when
      summing over all the eigenfunctions within a level, for each level

      Concretely, in the case for inputs on the hypersphere, summing over all the
      spherical harmonics within a level is equal to evaluating the Gegenbauer polynomial.

      :param X: [N, dim+1]
      :param X2: [N2, dim+1]
      :param parameters: unused.
      :return: Evaluate the sum of eigenfunctions on each level. Returns
          a value for each level [N, N2, L]


   .. py:method:: _addition_theorem_diag(X, **parameters)

      Returns the sum of eigenfunctions on a level for which we have a simplified expression

      :param X: [N, 1]
      :param parameters: unused.
      :return: Evaluate the sum of eigenfunctions on each level. Returns
          a value for each level [N, L]


   .. py:method:: degree_to_num_eigenfunctions(degree)

      Returns the number of eigenfunctions that span the first `degree` degrees.


   .. py:method:: num_eigenfunctions_to_degree(num_eigenfunctions)

      Returns the minimum degree for which there are at least
      `num_eigenfunctions` in the collection.



